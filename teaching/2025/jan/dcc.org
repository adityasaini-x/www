#+TITLE: Data-Centric Computing
#+OPTIONS: H:6

* Policies

** Evaluation

Attend lectures and labs only if you want to. It is expected that you
will keep up with the discussions during lectures and labs even if you
don't attend them.

The evaluation policy is as follows:
| Assessment   | Percentage | Remarks                       |
|--------------+------------+-------------------------------|
| Quiz x10     |         60 | Best 6 out of 10. Normalized. |
| Mid-semester |         20 |                               |
| End-semester |         20 |                               |

- Quizzes will be conducted during lectures or labs. There will be no
  surprise quizzes.
- There will be no retakes if you miss a quiz. We will simply take
  best 6 of your scores.
- Any violation of the honor code of the institute is automatically an
  "F" grade.
- The syllabus for all assessments is whatever that has been discussed
  or suggested until and including the previous meeting.

** Resources

There are no prescribed textbooks for this course. The topics we cover
in this course are spread across many books, research papers, and
other technical documents. The following list of links will collect
the external resources.
- [[https://beej.us/guide/bgc/][Beej's Guide to C Programming.]]
- [[https://docs.python.org/3/tutorial/index.html][Python 3 Official Tutorial.]]
- [[https://www.jstatsoft.org/article/view/v059i10/][Tidy Data by Hadley Wickham.]]

You are expected to use these in addition to the following lecture
notes. Your TAs are also a resource from which to learn. Use them.

* Lectures

** Overview

We call presentation of values as data. Data has various forms:
numbers, text, audio, video, lists, tables, dictionaries, etc. Data
can be classified loosely into two categories as follows:
- Low-level :: Convenient for consumption by computers.
- High-level :: Convenient for consumption by humans.

As programmers, we have to learn both. We write programs which help
computers consume data. We also use programs that help us consume
data, for example, spreadsheet programs.

For presenting the same value, there are usually many choices. For
example, we represent by 42 and LXII the same value. The place-value
system won because it was compact and it was convenient to do
arithmetic on it. As programmers, we must learn to evaluate various
representations and choose the best one for our requirements.

If I have to store scores of various quizzes, should I use this table?
| Name  | Q1 | Q2 |
|-------+----+----|
| Raj   |  5 |  7 |
| Rahul |  6 |  3 |
or this one?
| Name  | Assessment | Score |
|-------+------------+-------|
| Raj   | Q1         |     5 |
| Raj   | Q2         |     7 |
| Rahul | Q1         |     6 |
| Rahul | Q2         |     3 |
How do you determine which is better?

** Low-level Data

Data has types. The type determines meaning and valid operations on
data. In a computer, everything is represented as a sequence of
bits. A bit is a type of data that has two values -- 0 and 1. A group
of 8 bits is a byte.

We will see some of the low-level types supported by the C programming
language.

*** Unsigned Integers

A sequence of 8 bits can represent unsigned integers from 0 to 255. We
use a place-value system with 2 as the base to interpret these
numbers. The least significant bit has place value 1, the next one 2,
the next 4, and so on.

The usual arithmetic operations are supported and results wrap to
fit. Adding 1 to 255 yields 0 for 8-bit unsigned integers.

Bitwise operators operate bit-by-bit. The AND (&) operation outputs 1
if both bits are 1, the OR (|) operation outputs 1 when at least one
of the bits are 1, the XOR (^) operation outputs 1 when exactly one of
the bits are 1. The unary NOT (~) operation changes the bit.

#+begin_src C :results output :exports both
  #include <stdio.h>
  #include <stdint.h>

  int main()
  {
      uint8_t a = 0xa7, b = 0x14;
      printf("%x\n", a&b);
      printf("%x\n", a|b);
      printf("%x\n", a^b);
      printf("%x\n", ~a);
      return 0;
  }
#+end_src

#+RESULTS:
: 4
: b7
: b3
: ffffff58

To understand why there is a 32-bit output, see [[https://beej.us/guide/bgc/html/split/types-iii-conversions.html#integer-promotions][Integer Promotions in
Beej's guide]].

See [[https://beej.us/guide/bgc/html/split/bitwise-operations.html#bitwise-operations][Bitwise Operations in Beej's guide]].

*** Signed Integers

An 8-bit signed integer represents values from -128 to 127. This is
achieved by negating the place-value of the most significant bit.

Arithmetic operations should not overflow or underflow. The programmer
should ensure this.

There are types like ~int8_t~ that have specified bit-width. Types
like ~int~ have a fixed, unspecified width.

#+begin_src C :results output :exports both
  #include <stdio.h>
  #include <stdint.h>

  int main()
  {
      int8_t i8 = 0xa3;
      int i = 25;
      printf("%d\n", i8);
      printf("%x\n", i);
      printf("%d\n", sizeof(i));
      return 0;
  }
#+end_src

#+RESULTS:
: -93
: 19
: 4

See [[https://beej.us/guide/bgc/html/split/variables-and-statements.html#arithmetic][Operations in Beej's guide]].

*** Characters

A character is an 8-bit type that represents characters of the English
alphabet.

#+begin_src C :results output :exports both
  #include <stdio.h>

  int main()
  {
      char c = 'a';
      printf("%c (%x)\n", c, c);
      c = 'A';
      printf("%c (%x)\n", c, c);
      return 0;
  }
#+end_src

#+RESULTS:
: a (61)
: A (41)

See [[https://beej.us/guide/bgc/html/split/types-ii-way-more-types.html#character-types][Character Types in Beej's guide]].

*** Products

A product type holds values of possibly distinct types simultaneously.

#+begin_src C :results output :exports both
  #include <stdio.h>

  struct point
  {
      int x;
      int y;
  };

  int main()
  {
      struct point p = { .x = 1, .y = 2 };
      printf("The square of distance of p: %d\n", p.x*p.x + p.y*p.y);
      p.x += 2;
      p.y += 3;
      printf("The square of distance of p: %d\n", p.x*p.x + p.y*p.y);
      return 0;
  }
#+end_src

#+RESULTS:
: The square of distance of p: 5
: The square of distance of p: 34

#+begin_src C :results output :exports both
  #include <stdio.h>

  struct employee
  {
      int salary;
      char designation;
  };

  int main()
  {
      struct employee p = { .salary = 40000, .designation = 'M' };
      printf (
	  "%s earning %d.\n",
	  p.designation == 'M' ? "Manager" : "Worker",
	  p.salary
      );
      return 0;
  }
#+end_src

#+RESULTS:
: Manager earning 40000.

*** Unions

A union holds values of multiple types but not simultaneously. All
values are stored at the same place. So only one of them can exist at
a time.

#+begin_src C :results output :exports both
  #include <stdio.h>

  union ioc
  {
      int i;
      char c;
  };

  int main()
  {
      union ioc u;
      u.i = 42;
      printf("%d %x\n", u.i, u.c);
      u.c = 10;
      printf("%d %x\n", u.i, u.c);
      return 0;
  }
#+end_src

#+RESULTS:
: 42 2a
: 10 a

See [[https://beej.us/guide/bgc/html/split/structs-ii-more-fun-with-structs.html#unions][Unions in Beej's guide]].

*** Sums

We can combine ~struct~ and ~union~ to create a sum. A sum holds one
value at a time along with a tag to identify which one is being held.

#+begin_src C :results output :exports both
  #include <stdio.h>

  struct animal
  {
      int tag; // 0 - cat, 1 - fish.
      union {
	  struct {
	      int whiskers;
	  } cat;
	  struct {
	      int scales;
	  } fish;
      };
  };

  void describe(struct animal a)
  {
      switch (a.tag) {
      case 0:
	  printf("Cat with %d whiskers.\n", a.cat.whiskers);
	  break;
      case 1:
	  printf("Fish with %d scales.\n", a.fish.scales);
	  break;
      default:
	  printf("I don't recognize this animal.\n");
      }
  }

  int main()
  {
      struct animal a = {
	  .tag = 0,
	  .cat.whiskers = 10
      };
      struct animal b = {
	  .tag = 1,
	  .fish.scales = 100
      };
      describe(a);
      describe(b);
      return 0;
  }
#+end_src

#+RESULTS:
: Cat with 10 whiskers.
: Fish with 100 scales.

*** Arrays

An array is a sequence of values of the same type. We can access
individual elements using indexing. Indices start at zero.

#+begin_src C :results output :exports both
  #include <stdio.h>

  int main()
  {
      int primes[] = { 2, 3, 5, 7, 9, 13 };
      printf("The fifth prime is %d.\n", primes[4]);
      primes[4] = 11;
      printf("The fifth prime is %d.\n", primes[4]);
      return 0;
  }
#+end_src

#+RESULTS:
: The fifth prime is 9.
: The fifth prime is 11.

We usually traverse arrays in C using a three-clause ~for~
loop. Here's an implementation of the linear-search algorithm:

#+begin_src C :results output :exports both
  #include <stdio.h>

  ssize_t linsearch(int haystack[], int n, int needle)
  {
      for (size_t i = 0; i < n; ++i) {
	  if (haystack[i] == needle)
	      return i;
      }

      return -1;
  }

  int main()
  {
      int primes[] = { 2, 3, 5, 7, 11, 13 };
      printf("%d found at %d.\n", 5, linsearch(primes, 6, 5));
      printf("%d found at %d.\n", 12, linsearch(primes, 6, 12));
      return 0;
  }

#+end_src

#+RESULTS:
: 5 found at 2.
: 12 found at -1.

*** Pointers

Every memory location has an address. A pointer is a type where values
are addresses. The value held at the address can be changed through a
pointer. Changing the pointer makes it point to a different location.

#+begin_src C :results output :exports both
  #include <stdio.h>

  int main()
  {
      int i = 0, j = 5;
      int *p = &i;
      printf("%d@%x %d@%x\n", i, &i, j, &j);
      *p = 3;
      printf("%d@%x %d@%x\n", i, &i, j, &j);
      p = &j;
      *p = 2;
      printf("%d@%x %d@%x\n", i, &i, j, &j);
      return 0;
  }
#+end_src

#+RESULTS:
: 0@1ed95954 5@1ed95950
: 3@1ed95954 5@1ed95950
: 3@1ed95954 2@1ed95950

Here are some relationships pointers in C have to other concepts.
- You can use the address-of operator, denoted ~&~, to obtain the
  address of variables, struct or union members, and array members.
- The special value ~NULL~ is valid for any pointer and means that the
  pointer is not pointing to any object.
- If ~a~ is an array variable, then the expression ~a~ is a pointer to
  the first element of the array. This is called pointer-to-array
  decay in C.
- The operator ~s->a~ is equivalent to ~(*s).a~.

*** Recursive types

**** Lists

**** Trees

*** Products in Python

*** Sums in Python

*** Iterators and generators in Python

** Fundamental algorithms

*** Searching

*** Sorting

*** Map, Filter, and Reduce

* Labs

** C datatypes

One of the first goals is to understand precisely how fundamental
types behave in C. Here are some exercises that will help.

1. Compile and run all C programs you saw in the lecture.
2. Write a program to print the binary representation of a ~uint8_t~
   value.
3. Can you implement unary negation of an ~int8_t~ using only bitwise
   operations and addition?
4. Given an ~int8_t~, how do you compute a ~uint8_t~ that holds the
   absolute value of the given integer?
5. Write a program to print the binary representation of a ~int8_t~
   value.
6. There is a datatype called ~long~, how many bytes is it on your
   machine?
7. Read and understand the shift operators in C.
8. Implement right rotation of ~uint8_t~ using bitwise and shift
   operators. A right rotate operation takes a ~uint8_t~ and a value
   between 0 and 7 inclusive and rotates the bits towards the
   right. For example, the eight-bit number =10110101= right rotated
   by three gives =10110110=.
9. Implement left rotation similarly.

*** Solutions

You can print the binary representation by doing a bitwise AND with
the appropriate values.
#+begin_src C :results output :exports both
#+end_src

C programs you saw in the lecture.
2. Write a program to print the binary representation of a ~uint8_t~
   value.
3. Can you implement unary negation of an ~int8_t~ using only bitwise
   operations and addition?
4. Given an ~int8_t~, how do you compute a ~uint8_t~ that holds the
   absolute value of the given integer?
5. Write a program to print the binary representation of a ~int8_t~
   value.
6. There is a datatype called ~long~, how many bytes is it on your
   machine?
7. Read and understand the shift operators in C.
8. Implement right rotation of ~uint8_t~ using bitwise and shift
   operators. A right rotate operation takes a ~uint8_t~ and a value
   between 0 and 7 inclusive and rotates the bits towards the
   right. For example, the eight-bit number =10110101= right rotated
   by three gives =10110110=.
9. Implement left rotation similarly.

*** Solutions

This is just an exercise to make sure that the setup on your machine
is working.

You can print the binary representation by doing a bitwise AND with
the appropriate values. Since we know our input has exactly eight
bits, we don't need a loop either.
#+begin_src C :results output :exports both
  #include <stdio.h>
  #include <stdint.h>

  int main()
  {
      uint8_t u = 0xa3;

      if (u & 0x80) printf("1"); else printf("0");
      if (u & 0x40) printf("1"); else printf("0");
      if (u & 0x20) printf("1"); else printf("0");
      if (u & 0x10) printf("1"); else printf("0");
      if (u & 0x08) printf("1"); else printf("0");
      if (u & 0x04) printf("1"); else printf("0");
      if (u & 0x02) printf("1"); else printf("0");
      if (u & 0x01) printf("1"); else printf("0");

      return 0;
  }
#+end_src

#+RESULTS:
: 10100011
Why does an expression like ~u & 0x80~ work as a condition? In C, all
integer values other than zero are considered true and zero is
considered false.

Another way to do this is to iterate exactly eight times.
#+begin_src C :results output :exports both
  #include <stdio.h>
  #include <stdint.h>

  int main()
  {
      uint8_t u = 0xa3;

      for (int i = 0; i < 8; ++i) {
	  if (u & (0x80 >> i))
	      printf("1");
	  else
	      printf("0");
      }

      return 0;
  }
#+end_src

#+RESULTS:
: 10100011

You can implement unary negation by using the equation ~-a == ~a + 1~.

You can get absolute value by simply comparing with 0 and taking the
negation if necessary.
#+begin_src C :results output :exports both :includes <stdio.h> :includes <stdint.h>
  int8_t i8 = -128;
  uint8_t u8;

  printf("%d\n", i8);

  if (i8 >= 0)
      u8 = i8;
  else
      u8 = -i8;

  printf("%d\n", u8);
#+end_src

#+RESULTS:
: -128
: 128

Notice that it correctly worked with ~-128~ too. But why? When we
negate ~-128~, we get ~128~ which is the same as ~0~ as a signed
integer. But it still printed ~128~.

The same code for ~uint8_t~ works for printing bits of ~int8_t~. Just
change types.

#+begin_src C :results output :exports both :includes <stdio.h>
  printf("%d\n", sizeof(long));
#+end_src

#+RESULTS:
: 8

We can write a function to implement this. Let ~s~ be the amount to
rotate. We first extract the lower-order ~s~ bits, then right-shift,
and then place the extracted bits at the beginning.
#+begin_src C :results output :exports both
  #include <stdio.h>
  #include <stdint.h>
  #include <stddef.h>

  uint8_t rrot(uint8_t u, size_t s)
  {
      uint8_t lower = u & ((0x1 << s) - 1); // extract
      u >>= s; // shift
      u |= lower << (8-s); // put back
      return u;
  }

  int main()
  {
      printf("%x\n", rrot(0xb5, 3));
      return 0;
  }
#+end_src

#+RESULTS:
: b6

To understand the above code, take a pen and paper and try and
simulate what the computer did by hand. You can also ask chatgpt to
ask how this works. But don't forget to verify that its answer is
correct by verifying with authoritative sources.

Left rotation is left as an exercise.

** Structs, arrays, and pointers

The ~double~ type in C can approximate rational numbers. Use it to
represent coordinates. Write a ~struct~ to represent lines in a plane
and write code to check whether or not two lines intersect. Use the
following code as a starting point.

#+begin_src C
  #include <stdio.h>

  struct line {
      // Fill in the members to represent a line.
      // Can you represent horizontal, vertical, and slanted lines?
  };

  int main()
  {
      // Fill these so that these become valid lines.
      struct line L1 = {};
      struct line L2 = {};

      // Write code here to check whether L1 and L2 intersect.
      // Change L1 and L2 and test various cases.
      // And, print whether or not they do.

      return 0;
  }
#+end_src

We can now write ~struct~ to represent rectangles and circles. Also,
write code to check whether or not these shapes overlap.

#+begin_src C
  #include <stdio.h>

  struct point {
      double x;
      double y;
  };

  struct rectangle {
      // Fill here.
  };

  struct circle {
      // Fill here.
  };

  int main()
  {

      // Fill in members so that you get valid rectangles and circles.
      struct rectangle R1 = {};
      struct rectangle R2 = {};

      struct circle C1 = {};
      struct circle C2 = {};

      // Write code here to check whether R1 and R2 intersect and print
      // the result.

      // Write code here to check whether C1 and C2 intersect and print
      // the result.

      return 0;
  }
#+end_src

Finally, let us write some code to find the farthest point from the origin.

#+begin_src C
  #include <stdio.h>

  struct point {
      double x;
      double y;
  };

  int main()
  {
      // Fill the array so that you have at least five points.
      struct point ps[] = {};
      struct point farthest;

      // Write code here to compute the farthest point from origin in the
      // array ps into the variable farthest.

      printf("The farthest point is (%.2lf, %.2lf).\n", farthest.x, farthest.y);

      return 0;
  }
#+end_src

An exercise on initializing pointers.

#+begin_src C
  #include <stdio.h>

  int main()
  {
      int a = 14, b = 25;
      int *min;
      int *max;

      // Write code here so that the following printf works as
      // expected. Do not change the values of a and b.
      printf("min = %d, max = %d\n", *min, *max);

      return 0;
  }
#+end_src

Some array manipulation.

#+begin_src C :results output
  #include <stdio.h>

  int main()
  {
      // Fill the array with some elements.
      int xs[] = {};

      // Write code here so that the elements in xs are reversed.

      // Use size_t for indexing into arrays.
      for (size_t i = 0; i < sizeof(xs)/sizeof(xs[0]); ++i) {
	  printf("%d\n", xs[i]);
      }

      return 0;
  }
#+end_src

More array processing.

#+begin_src C :results output
  #include <stdio.h>

  int main()
  {
      // Fill the array with some elements.
      int xs[] = {};
      int positive = 0, negative = 0, zero = 0;

      // Modift the code below so that everything works as expected.

      printf("The array has %d positive elements, %d negative elements, and %d zeroes.\n", positive, zero, negative);

      return 0;
  }
#+end_src
